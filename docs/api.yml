openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22092
servers:
  - url: https://library.com
paths:
  '/books':
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      tags:
        - Books
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateStart
          description: Filter books released after this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books released before this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  '/topics':
    get:
      summary: Get all topics with pagination and filtering
      description: Get a list of all topics with pagination and filtering.
      operationId: getTopicsWithPagination
      tags:
        - Topics
      parameters:
        - in: query
          name: page
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
        - in: query
          name: topicName
          description: Filter topics by name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered topics with pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
    put:
      summary: Create or update a topic
      operationId: crupdateTopic
      tags:
        - Topics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: The topic has been created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
  '/topics/delete/{topicId}':
    delete:
      summary: Delete a topic by ID
      operationId: deleteTopic
      tags:
        - Topics
      parameters:
        - in: path
          name: topicId
          description: ID of the topic to delete
          required: true
          schema:
            $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: The topic has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
  '/authorsTopics':
    get:
      summary: Get a list of AuthorTopics
      description: Get a list of AuthorTopics with optional author ID and author name filters.
      operationId: getAuthorsTopics
      tags:
        - Authors
        - Topics
      parameters:
        - in: query
          name: authorId
          description: Filter by author ID
          required: false
          schema:
            type: string
        - in: query
          name: authorName
          description: Filter by author name
          required: false
          schema:
            type: string
        - in: query
          name: authorSex
          description: Filter by author sex (M or F)
          required: false
          schema:
            $ref: '#/components/schemas/Sex'
      responses:
        200:
          description: The list of AuthorTopics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorTopic'
  '/authors':
    get:
      summary: Get all authors
      description: Get a list of all authors or filter by name.
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of [filtered] authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The author has been created or updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  '/authors/{page}/{pageSize}':
    get:
      summary: Get all authors with pagination
      description: Get a list of authors with pagination or filter by name.
      operationId: getAuthorsWithPagination
      tags:
        - Authors
      parameters:
        - in: path
          name: page
          description: Page number
          required: true
          schema:
            type: integer
            default: 1
        - in: path
          name: pageSize
          description: Number of items per page
          required: true
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of [filtered] authors with pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  '/authors/delete/{authorId}':
    delete:
      summary:
